
# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build and Release

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run:
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }};

    - name: Install tree
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get install -y tree
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          brew install tree
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          choco install tree
        fi

    - name: Make artifacts directory
      shell: bash
      run: |
        mkdir -p artifacts

    - name: List built files
      run: | 
        echo "ls: ${{ steps.strings.outputs.build-output-dir }}"
        ls ${{ steps.strings.outputs.build-output-dir }}
        echo "tree: ${{ steps.strings.outputs.build-output-dir }}"
        tree .
    
    - name: Rename and move binary
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          mv ${{ steps.strings.outputs.build-output-dir }}/main artifacts/main-Linux
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          mv ${{ steps.strings.outputs.build-output-dir }}/main artifacts/main-macos
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          mv "${{ steps.strings.outputs.build-output-dir }}"/Release/main.exe artifacts/main-windows.exe
        fi

    - name: List built files
      run: 
        tree .

    - name: Compress binary
      shell: bash
      working-directory: artifacts
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          tar czf main-Linux.tar.gz main-Linux
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          tar czf main-macos.tar.gz main-macos
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          powershell Compress-Archive -Path main-windows.exe -DestinationPath main-windows.zip
        fi

    - name: Generate SHA256 hash
      shell: bash
      working-directory: artifacts
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          echo ${{ runner.os }} >> hash.txt
          sha256sum main-Linux.tar.gz >> hash.txt
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          echo ${{ runner.os }} >> hash.txt
          shasum -a 256 main-macos.tar.gz >> hash.txt
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          echo ${{ runner.os }} >> hash.txt
          powershell -Command "(Get-FileHash -Path main-windows.zip -Algorithm SHA256).Hash | Out-File -Append -Encoding string hash.txt"
        fi

    - name: Upload hash file
      uses: actions/upload-artifact@v2
      with:
        name: hash-${{ runner.os }}
        path: artifacts/hash.txt

    - name: Upload compressed binary
      uses: actions/upload-artifact@v2
      with:
        name: binary-${{ runner.os }}
        path: artifacts/main-${{ runner.os }}*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Create releases directory
      run: mkdir releases

    - name: Download all artifacts
      uses: actions/download-artifact@v2
      with:
        path: releases

    - name: Combine hash files
      run: cat releases/hash-*/hash.txt > releases/combined-hash.txt

    - name: List releases
      run: ls -R releases