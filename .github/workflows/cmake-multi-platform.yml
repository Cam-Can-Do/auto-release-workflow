name: CMake on multiple platforms

on:
  push:
    branches:
      - main # Replace with your default branch if it's not 'main'
  pull_request:
    branches:
      - main # Replace with your default branch if it's not 'main'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "binary-name=sample-${{ matrix.os }}-${{ matrix.c_compiler }}" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Archive build for Linux
        if: runner.os == 'Linux'
        run: tar -czvf ${{ steps.strings.outputs.build-output-dir }}/binary.tar.gz -C ${{ steps.strings.outputs.build-output-dir }} .

      - name: Archive build for Windows
        if: runner.os == 'Windows'
        run: powershell Compress-Archive -Path ${{ steps.strings.outputs.build-output-dir }}\* -DestinationPath ${{ steps.strings.outputs.build-output-dir }}\binary.zip

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: $(date +%Y-%m-%d)
          release_name: Release $(date +%Y-%m-%d)
          draft: false
          prerelease: false

      - name: Upload Release Asset for Linux
        if: runner.os == 'Linux'
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.strings.outputs.build-output-dir }}/binary.tar.gz
          asset_name: ${{ steps.strings.outputs.binary-name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset for Windows
        if: runner.os == 'Windows'
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.strings.outputs.build-output-dir }}\binary.zip
          asset_name: ${{ steps.strings.outputs.binary-name }}.zip
          asset_content_type: application/zip
